<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.middleschool.score.common.mapper.MsScoreMapper" >
  <resultMap id="BaseResultMap" type="com.middleschool.score.common.dto.MsScore" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="student_id" property="studentId" jdbcType="BIGINT" />
    <result column="class_id" property="classId" jdbcType="INTEGER" />
    <result column="semester" property="semester" jdbcType="INTEGER" />
    <result column="chinese" property="chinese" jdbcType="DOUBLE" />
    <result column="english" property="english" jdbcType="DOUBLE" />
    <result column="math" property="math" jdbcType="DOUBLE" />
    <result column="start_date" property="startDate" jdbcType="TIMESTAMP" />
    <result column="end_date" property="endDate" jdbcType="TIMESTAMP" />
    <result column="political" property="political" jdbcType="DOUBLE" />
    <result column="history" property="history" jdbcType="DOUBLE" />
    <result column="physico" property="physico" jdbcType="DOUBLE" />
    <result column="geography" property="geography" jdbcType="DOUBLE" />
    <result column="biology" property="biology" jdbcType="DOUBLE" />
    <result column="chemical" property="chemical" jdbcType="DOUBLE" />
    <result column="basic_competencies" property="basicCompetencies" jdbcType="DOUBLE" />
    <result column="type" property="type" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, student_id, class_id, semester, chinese, english, math, start_date, end_date,
    political, history, physico, geography, biology, chemical, basic_competencies, type
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.middleschool.score.common.dto.MsScoreExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from ms_score
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select
    <include refid="Base_Column_List" />
    from ms_score
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from ms_score
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.middleschool.score.common.dto.MsScoreExample" >
    delete from ms_score
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.middleschool.score.common.dto.MsScore" >
    insert into ms_score (id, student_id, class_id,
    semester, chinese, english,
    math, start_date, end_date,
    political, history, physico,
    geography, biology, chemical,
    basic_competencies, type)
    values (#{id,jdbcType=BIGINT}, #{studentId,jdbcType=BIGINT}, #{classId,jdbcType=INTEGER},
    #{semester,jdbcType=INTEGER}, #{chinese,jdbcType=DOUBLE}, #{english,jdbcType=DOUBLE},
    #{math,jdbcType=DOUBLE}, #{startDate,jdbcType=TIMESTAMP}, #{endDate,jdbcType=TIMESTAMP},
    #{political,jdbcType=DOUBLE}, #{history,jdbcType=DOUBLE}, #{physico,jdbcType=DOUBLE},
    #{geography,jdbcType=DOUBLE}, #{biology,jdbcType=DOUBLE}, #{chemical,jdbcType=DOUBLE},
    #{basicCompetencies,jdbcType=DOUBLE}, #{type,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.middleschool.score.common.dto.MsScore" >
    insert into ms_score
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="studentId != null" >
        student_id,
      </if>
      <if test="classId != null" >
        class_id,
      </if>
      <if test="semester != null" >
        semester,
      </if>
      <if test="chinese != null" >
        chinese,
      </if>
      <if test="english != null" >
        english,
      </if>
      <if test="math != null" >
        math,
      </if>
      <if test="startDate != null" >
        start_date,
      </if>
      <if test="endDate != null" >
        end_date,
      </if>
      <if test="political != null" >
        political,
      </if>
      <if test="history != null" >
        history,
      </if>
      <if test="physico != null" >
        physico,
      </if>
      <if test="geography != null" >
        geography,
      </if>
      <if test="biology != null" >
        biology,
      </if>
      <if test="chemical != null" >
        chemical,
      </if>
      <if test="basicCompetencies != null" >
        basic_competencies,
      </if>
      <if test="type != null" >
        type,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="studentId != null" >
        #{studentId,jdbcType=BIGINT},
      </if>
      <if test="classId != null" >
        #{classId,jdbcType=INTEGER},
      </if>
      <if test="semester != null" >
        #{semester,jdbcType=INTEGER},
      </if>
      <if test="chinese != null" >
        #{chinese,jdbcType=DOUBLE},
      </if>
      <if test="english != null" >
        #{english,jdbcType=DOUBLE},
      </if>
      <if test="math != null" >
        #{math,jdbcType=DOUBLE},
      </if>
      <if test="startDate != null" >
        #{startDate,jdbcType=TIMESTAMP},
      </if>
      <if test="endDate != null" >
        #{endDate,jdbcType=TIMESTAMP},
      </if>
      <if test="political != null" >
        #{political,jdbcType=DOUBLE},
      </if>
      <if test="history != null" >
        #{history,jdbcType=DOUBLE},
      </if>
      <if test="physico != null" >
        #{physico,jdbcType=DOUBLE},
      </if>
      <if test="geography != null" >
        #{geography,jdbcType=DOUBLE},
      </if>
      <if test="biology != null" >
        #{biology,jdbcType=DOUBLE},
      </if>
      <if test="chemical != null" >
        #{chemical,jdbcType=DOUBLE},
      </if>
      <if test="basicCompetencies != null" >
        #{basicCompetencies,jdbcType=DOUBLE},
      </if>
      <if test="type != null" >
        #{type,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.middleschool.score.common.dto.MsScoreExample" resultType="java.lang.Integer" >
    select count(*) from ms_score
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update ms_score
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.studentId != null" >
        student_id = #{record.studentId,jdbcType=BIGINT},
      </if>
      <if test="record.classId != null" >
        class_id = #{record.classId,jdbcType=INTEGER},
      </if>
      <if test="record.semester != null" >
        semester = #{record.semester,jdbcType=INTEGER},
      </if>
      <if test="record.chinese != null" >
        chinese = #{record.chinese,jdbcType=DOUBLE},
      </if>
      <if test="record.english != null" >
        english = #{record.english,jdbcType=DOUBLE},
      </if>
      <if test="record.math != null" >
        math = #{record.math,jdbcType=DOUBLE},
      </if>
      <if test="record.startDate != null" >
        start_date = #{record.startDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.endDate != null" >
        end_date = #{record.endDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.political != null" >
        political = #{record.political,jdbcType=DOUBLE},
      </if>
      <if test="record.history != null" >
        history = #{record.history,jdbcType=DOUBLE},
      </if>
      <if test="record.physico != null" >
        physico = #{record.physico,jdbcType=DOUBLE},
      </if>
      <if test="record.geography != null" >
        geography = #{record.geography,jdbcType=DOUBLE},
      </if>
      <if test="record.biology != null" >
        biology = #{record.biology,jdbcType=DOUBLE},
      </if>
      <if test="record.chemical != null" >
        chemical = #{record.chemical,jdbcType=DOUBLE},
      </if>
      <if test="record.basicCompetencies != null" >
        basic_competencies = #{record.basicCompetencies,jdbcType=DOUBLE},
      </if>
      <if test="record.type != null" >
        type = #{record.type,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update ms_score
    set id = #{record.id,jdbcType=BIGINT},
    student_id = #{record.studentId,jdbcType=BIGINT},
    class_id = #{record.classId,jdbcType=INTEGER},
    semester = #{record.semester,jdbcType=INTEGER},
    chinese = #{record.chinese,jdbcType=DOUBLE},
    english = #{record.english,jdbcType=DOUBLE},
    math = #{record.math,jdbcType=DOUBLE},
    start_date = #{record.startDate,jdbcType=TIMESTAMP},
    end_date = #{record.endDate,jdbcType=TIMESTAMP},
    political = #{record.political,jdbcType=DOUBLE},
    history = #{record.history,jdbcType=DOUBLE},
    physico = #{record.physico,jdbcType=DOUBLE},
    geography = #{record.geography,jdbcType=DOUBLE},
    biology = #{record.biology,jdbcType=DOUBLE},
    chemical = #{record.chemical,jdbcType=DOUBLE},
    basic_competencies = #{record.basicCompetencies,jdbcType=DOUBLE},
    type = #{record.type,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.middleschool.score.common.dto.MsScore" >
    update ms_score
    <set >
      <if test="studentId != null" >
        student_id = #{studentId,jdbcType=BIGINT},
      </if>
      <if test="classId != null" >
        class_id = #{classId,jdbcType=INTEGER},
      </if>
      <if test="semester != null" >
        semester = #{semester,jdbcType=INTEGER},
      </if>
      <if test="chinese != null" >
        chinese = #{chinese,jdbcType=DOUBLE},
      </if>
      <if test="english != null" >
        english = #{english,jdbcType=DOUBLE},
      </if>
      <if test="math != null" >
        math = #{math,jdbcType=DOUBLE},
      </if>
      <if test="startDate != null" >
        start_date = #{startDate,jdbcType=TIMESTAMP},
      </if>
      <if test="endDate != null" >
        end_date = #{endDate,jdbcType=TIMESTAMP},
      </if>
      <if test="political != null" >
        political = #{political,jdbcType=DOUBLE},
      </if>
      <if test="history != null" >
        history = #{history,jdbcType=DOUBLE},
      </if>
      <if test="physico != null" >
        physico = #{physico,jdbcType=DOUBLE},
      </if>
      <if test="geography != null" >
        geography = #{geography,jdbcType=DOUBLE},
      </if>
      <if test="biology != null" >
        biology = #{biology,jdbcType=DOUBLE},
      </if>
      <if test="chemical != null" >
        chemical = #{chemical,jdbcType=DOUBLE},
      </if>
      <if test="basicCompetencies != null" >
        basic_competencies = #{basicCompetencies,jdbcType=DOUBLE},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.middleschool.score.common.dto.MsScore" >
    update ms_score
    set student_id = #{studentId,jdbcType=BIGINT},
      class_id = #{classId,jdbcType=INTEGER},
      semester = #{semester,jdbcType=INTEGER},
      chinese = #{chinese,jdbcType=DOUBLE},
      english = #{english,jdbcType=DOUBLE},
      math = #{math,jdbcType=DOUBLE},
      start_date = #{startDate,jdbcType=TIMESTAMP},
      end_date = #{endDate,jdbcType=TIMESTAMP},
      political = #{political,jdbcType=DOUBLE},
      history = #{history,jdbcType=DOUBLE},
      physico = #{physico,jdbcType=DOUBLE},
      geography = #{geography,jdbcType=DOUBLE},
      biology = #{biology,jdbcType=DOUBLE},
      chemical = #{chemical,jdbcType=DOUBLE},
      basic_competencies = #{basicCompetencies,jdbcType=DOUBLE},
      type = #{type,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>


  <select id="selectPassRateByClassId" resultMap="BaseResultMap" parameterType="com.middleschool.score.common.dto.MsScoreExample">
    select *
    from ms_score  where class_id = #{classId,jdbcType=BIGINT} and now() BETWEEN start_date AND end_date
  </select>
  <!-- 查询学生当前排名-->
  <select id="selectRanking"  parameterType="com.middleschool.score.common.dto.MsScoreExample" resultType="java.lang.Integer">
    SELECT count(*)
    FROM (
    SELECT(s.math + s.english + s.chinese+s.chemical+s.basic_competencies+s.biology+s.geography+s.physico+s.history+s.political) student_zong
    FROM ms_score s
    WHERE  s.class_id=#{classId,jdbcType=BIGINT} and  NOW() BETWEEN s.start_date AND s.end_date)  as a
    WHERE a.student_zong>(
    SELECT(s.math + s.english + s.chinese+s.chemical+s.basic_competencies+s.biology+s.geography+s.physico+s.history+s.political) student_zong
    FROM ms_score s
    WHERE s.student_id = #{studentId,jdbcType=BIGINT} AND NOW() BETWEEN s.start_date AND s.end_date)
  </select>

  <!-- 查询学生当前成绩-->
  <select id="selectNowScoreByStudentId" resultMap="BaseResultMap" parameterType="com.middleschool.score.common.dto.MsScoreExample">
    select
    <include refid="Base_Column_List" />
    from ms_score where student_id = #{studentId,jdbcType=BIGINT} and now() BETWEEN start_date AND end_date
  </select>

  <!-- 查询学生所有成绩-->
  <select id="selectAllScoreByStudentId" resultMap="BaseResultMap" parameterType="com.middleschool.score.common.dto.MsScoreExample">
    select
    *
    from ms_score where student_id = #{studentId,jdbcType=BIGINT} order by start_date
  </select>
  <select id="selectAll" resultMap="BaseResultMap" parameterType="com.middleschool.score.common.dto.MsScoreExample">
    select
    s.*
    from ms_score s left join ms_class c  on c.id=s.class_id where c.name=#{className,jdbcType=VARCHAR} and c.grade=#{grade,jdbcType=BIGINT} and now() BETWEEN s.start_date and s.end_date ORDER BY(s.math + s.english + s.chinese+s.chemical+s.basic_competencies+s.biology+s.geography+s.physico+s.history+s.political) desc limit #{limit ,jdbcType=INTEGER} offset #{offset,jdbcType=INTEGER}
  </select>


  <select id="countScore" resultType="java.lang.Integer" parameterType="com.middleschool.score.common.dto.MsScoreExample">
    select COUNT(*)
    from ms_score s left join ms_class c  on c.id=s.class_id where c.name=#{className,jdbcType=VARCHAR} and c.grade=#{grade,jdbcType=BIGINT} and now() BETWEEN s.start_date and s.end_date
  </select>
  <select id="selectTopHundrth" resultMap="BaseResultMap">
    SELECT * FROM
	ms_score s
WHERE
	s.class_id IN   <foreach item="classid" index="index" collection="ids"
                             open="(" separator="," close=")" >
    #{classid}
  </foreach>
    AND NOW() BETWEEN s.start_date
AND s.end_date
ORDER BY(s.math + s.english + s.chinese+s.chemical+s.basic_competencies+s.biology+s.geography+s.physico+s.history+s.political) limit #{limit ,jdbcType=INTEGER} offset #{offset,jdbcType=INTEGER}
  </select>
  <insert id="saves" useGeneratedKeys="true" >
    <selectKey resultType="long" keyProperty="id" order="AFTER">
      SELECT
      LAST_INSERT_ID()
    </selectKey>
    insert into ms_score (id, student_id, class_id,
    semester, chinese, english,
    math, start_date, end_date,
    political, history, physico,
    geography, biology, chemical,
    basic_competencies, type)
    values
    <foreach collection="list" item="item" index="index" separator="," >
      (#{item.id,jdbcType=BIGINT}, #{item.studentId,jdbcType=BIGINT}, #{item.classId,jdbcType=INTEGER},
      #{item.semester,jdbcType=INTEGER}, #{item.chinese,jdbcType=DOUBLE}, #{item.english,jdbcType=DOUBLE},
      #{item.math,jdbcType=DOUBLE}, #{item.startDate,jdbcType=TIMESTAMP}, #{item.endDate,jdbcType=TIMESTAMP},
      #{item.political,jdbcType=DOUBLE}, #{item.history,jdbcType=DOUBLE}, #{item.physico,jdbcType=DOUBLE},
      #{item.geography,jdbcType=DOUBLE}, #{item.biology,jdbcType=DOUBLE}, #{item.chemical,jdbcType=DOUBLE},
      #{item.basicCompetencies,jdbcType=DOUBLE}, #{item.type,jdbcType=INTEGER})
   </foreach>
  </insert>
  <select id="seletTopScore" resultMap="BaseResultMap" parameterType="com.middleschool.score.common.dto.MsScoreExample">
    select
    *
     from ms_score where
     <trim>
       <if test="courseName=='chinese'">
         chinese
       </if>
       <if test="courseName=='english'">
         english
       </if>
       <if test="courseName=='math'">
         math
       </if>
       <if test="courseName=='political'">
         political
       </if>
       <if test="courseName=='geography'">
         geography
       </if>
       <if test="courseName=='basicCompetencies'">
         basic_competencies
       </if>
       <if test="courseName=='biology'">
         biology
       </if>
       <if test="courseName=='history'">
         history
       </if>
       <if test="courseName=='physico'">
         physico
       </if>
       <if test="courseName=='chemical'">
         chemical
       </if>
     </trim>
    =(select max(
    <trim>
    <if test="courseName=='chinese'">
      chinese
    </if>
    <if test="courseName=='english'">
      english
    </if>
    <if test="courseName=='math'">
      math
    </if>
    <if test="courseName=='political'">
      political
    </if>
    <if test="courseName=='geography'">
      geography
    </if>
    <if test="courseName=='basicCompetencies'">
      basic_competencies
    </if>
    <if test="courseName=='biology'">
      biology
    </if>
    <if test="courseName=='history'">
      history
    </if>
    <if test="courseName=='physico'">
      physico
    </if>
    <if test="courseName=='chemical'">
      chemical
    </if>
  </trim>)from ms_score  where now() BETWEEN start_date and end_date and type= #{type,jdbcType=INTEGER}) and now() BETWEEN start_date and end_date and type= #{type,jdbcType=INTEGER}
  </select>

</mapper>